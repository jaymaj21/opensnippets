<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Editable Div</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    html, body { height: 100%; margin: 0; }
    #editor {
      box-sizing: border-box;
      width: 100%;
      height: 100%;
      padding: 16px;
      outline: none;
      overflow: auto;
      font: 15px/1.5 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, "Helvetica Neue", Arial, sans-serif;
      white-space: pre-wrap;
      word-break: break-word;
    }
    .hl { border-radius: 2px; }
  </style>
</head>
<body>
  <div id="editor" contenteditable="true">
  </div>
 
  <script>
    const editor = document.getElementById('editor');

    // Random pleasant light color
    function randomLightColor() {
      const h = Math.floor(Math.random() * 360);
      const s = 85;  // %
      const l = 80;  // %
      return `hsl(${h} ${s}% ${l}%)`;
    }

    // Remove all highlights we created
    function clearHighlights(root) {
      const spans = root.querySelectorAll('span.hl[data-hl="1"]');
      spans.forEach(span => {
        const parent = span.parentNode;
        while (span.firstChild) parent.insertBefore(span.firstChild, span);
        parent.removeChild(span);
        parent.normalize();
      });
    }

    // Safely highlight all occurrences of a literal word (whole-word, case-insensitive)
    function highlightWordAll(root, rawWord) {
      const word = (rawWord || '').trim();
      if (!word) return;

      const esc = word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
      const re = new RegExp(`\\b${esc}\\b`, 'gi');

      const color = randomLightColor();
      const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, {
        acceptNode: (n) => {
          if (!n.nodeValue || !n.nodeValue.trim()) return NodeFilter.FILTER_REJECT;
          // Donâ€™t descend into existing highlights
          if (n.parentElement && n.parentElement.closest('span.hl[data-hl="1"]')) {
            return NodeFilter.FILTER_REJECT;
          }
          return NodeFilter.FILTER_ACCEPT;
        }
      });

      const work = [];
      while (walker.nextNode()) {
        const node = walker.currentNode;
        const text = node.nodeValue;
        re.lastIndex = 0;
        let m, matches = [];
        while ((m = re.exec(text)) !== null) {
          matches.push({ start: m.index, end: m.index + m[0].length });
        }
        if (matches.length) work.push({ node, matches });
      }

      // Wrap matches from end to start per node
      work.forEach(({ node, matches }) => {
        for (let i = matches.length - 1; i >= 0; i--) {
          const { start, end } = matches[i];
          const range = document.createRange();
          range.setStart(node, start);
          range.setEnd(node, end);

          const span = document.createElement('span');
          span.className = 'hl';
          span.dataset.hl = '1';
          span.style.backgroundColor = color;

          range.surroundContents(span);
        }
      });
    }

    function getSelectedWord() {
      const sel = window.getSelection();
      if (!sel || sel.rangeCount === 0) return '';
      const text = sel.toString();
      if (!text) return '';
      const m = text.match(/\w[\w'-]*/);
      return m ? m[0] : text.trim();
    }

    // Double-click to add (accumulate) highlights
    editor.addEventListener('dblclick', (ev) => {
      if (!ev.target.closest('#editor')) return;
      setTimeout(() => {
        const word = getSelectedWord();
        if (!word) return;
        highlightWordAll(editor, word); // accumulate (no clearing)
      }, 0);
    });

    // Escape clears all highlights
    document.addEventListener('keydown', (ev) => {
      if (ev.key === 'Escape') {
        clearHighlights(editor);
      }
    });
  </script>
</body>
</html>
